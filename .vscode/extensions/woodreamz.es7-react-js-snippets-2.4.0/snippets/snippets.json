{
  "eslintDisable": {
    "prefix": "eld",
    "body": "/* eslint-disable */"
  },
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "importStyled": {
    "prefix": "imsc",
    "body": "import styled from 'styled-components';$0"
  },
  "exportDefault": {
    "prefix": "exp",
    "body": "export default $1$0"
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Export named function in ES7 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": ["export default (${1:params}) => {", "\t$0", "}", ""],
    "description": "Export default function in ES7 syntax"
  },
  "method": {
    "prefix": "met",
    "body": ["${1:methodName} = (${2:params}) => {", "\t${0}", "}", ""],
    "description": "Creates a method inside a class in ES7 syntax"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": ["get ${1:propertyName}() {", "\treturn this.${0}", "}", ""],
    "description": "Creates a getter property inside a class in ES7 syntax"
  },
  "propertySet": {
    "prefix": "pse",
    "body": ["set ${1:propertyName}(${2:value}) {", "\t${0}", "}", ""],
    "description": "Creates a setter property inside a class in ES7 syntax"
  },
  "forEach": {
    "prefix": "fre",
    "body": ["${1:array}.forEach(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": ["for(let ${1:item} of ${2:object}) {", "\t${0}", "}", ""],
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": ["for(let ${1:item} in ${2:object}) {", "\t${0}", "}", ""],
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": ["(${1:params}) => {", "\t${2}", "}", ""],
    "description": "Creates an anonymous function in ES7 syntax"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": ["const ${1:name} = (${2:params}) => {", "\t${3}", "}", ""],
    "description": "Creates a named function in ES7 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": ["setInterval(() => {", "\t${2}", "}, ${0:intervalInms})", ""],
    "description": "Executes the given function at specified intervals in ES7 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": ["setTimeout(() => {", "\t${2}", "}, ${1:delayInms})", ""],
    "description": "Executes the given function after the specified delay in ES7 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => {", "\t${1}", "})", ""],
    "description": "Creates and returns a new Promise in the standard ES7 syntax"
  },
  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group(\"${1:label}\")",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group()."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object}', ${1:object})",
    "description": "Logs property with name."
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": "console.time('${1:object}')",
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd('${1:object}')",
    "description": "Console time end wrapper"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "destructProps": {
    "prefix": "cp",
    "body": ["const { $1 } = this.props"],
    "description": "Creates and assigns a local variable using props destructing"
  },
  "destructState": {
    "prefix": "cs",
    "body": ["const { $1 } = this.state"],
    "description": "Creates and assigns a local variable using state destructing"
  },
  "import React": {
    "prefix": "imr",
    "body": ["import React from 'react'", ""]
  },
  "import ReactDOM": {
    "prefix": "imrd",
    "body": ["import ReactDOM from 'react-dom'", ""]
  },
  "import React, { Component }": {
    "prefix": "imrc",
    "body": ["import React, { Component } from 'react'", ""]
  },
  "import React, { Component } & PropTypes": {
    "prefix": "imrcp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "import React, { PureComponent }": {
    "prefix": "imrpc",
    "body": ["import React, { PureComponent } from 'react'", ""]
  },
  "import React, { PureComponent } & PropTypes": {
    "prefix": "imrpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "import React, { memo }": {
    "prefix": "imrm",
    "body": ["import React, { memo } from 'react'", ""]
  },
  "import React, { memo } & PropTypes": {
    "prefix": "imrmp",
    "body": [
      "import React, { memo } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "import PropTypes": {
    "prefix": "impt",
    "body": ["import PropTypes from 'prop-types'", ""]
  },
  "import React Router": {
    "prefix": "imrr",
    "body": [
      "import { BrowserRouter as Router, Route, Link } from 'react-router-dom'",
      ""
    ]
  },
  "import redux statement": {
    "prefix": "redux",
    "body": ["import { connect } from 'react-redux'", ""]
  },
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": [
      "import React from 'react';",
      "import styled from 'styled-components';",
      "import PropTypes from 'prop-types';",
      "",
      "// #region constants",
      "",
      "// #endregion",
      "",
      "// #region styled-components",
      "",
      "// #endregion",
      "",
      "// #region functions",
      "",
      "// #endregion",
      "",
      "// #region component",
      "const propTypes = {};",
      "",
      "const defaultProps = {};",
      "",
      "/**",
      " * ",
      " */",
      "class ${1:${TM_FILENAME_BASE}} extends React.Component {",
      "constructor(props) {",
      "\tsuper(props);",
      "",
      "\tthis.state = {",
      "\t};",
      "}",
      "",
      "\trender() {",
      "\t\treturn <div>$2</div>;",
      "\t}",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = propTypes;",
      "${1:${TM_FILENAME_BASE}}.defaultProps = defaultProps;",
      "// #endregion",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "import styled from 'styled-components';",
      "import PropTypes from 'prop-types';",
      "",
      "// #region constants",
      "",
      "// #endregion",
      "",
      "// #region styled-components",
      "",
      "// #endregion",
      "",
      "// #region functions",
      "",
      "// #endregion",
      "",
      "// #region component",
      "const propTypes = {};",
      "",
      "const defaultProps = {};",
      "",
      "/**",
      " * ",
      " */",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn <div>$2</div>;",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = propTypes;",
      "${1:${TM_FILENAME_BASE}}.defaultProps = defaultProps;",
      "// #endregion",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "reactClassPureComponent": {
    "prefix": "rpc",
    "body": [
      "import React from 'react';",
      "import styled from 'styled-components';",
      "import PropTypes from 'prop-types';",
      "",
      "// #region constants",
      "",
      "// #endregion",
      "",
      "// #region styled-components",
      "",
      "// #endregion",
      "",
      "// #region functions",
      "",
      "// #endregion",
      "",
      "// #region component",
      "const propTypes = {};",
      "",
      "const defaultProps = {};",
      "",
      "/**",
      " * ",
      " */",
      "class ${1:${TM_FILENAME_BASE}} extends React.PureComponent {",
      "constructor(props) {",
      "\tsuper(props);",
      "",
      "\tthis.state = {",
      "\t};",
      "}",
      "",
      "\trender() {",
      "\t\treturn <div>$2</div>;",
      "\t}",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = propTypes;",
      "${1:${TM_FILENAME_BASE}}.defaultProps = defaultProps;",
      "// #endregion",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Creates a React pure component class with ES7 module system"
  },
  "mappingToProps": {
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({",
      "\t${1}",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      ""
    ]
  },
  "classConstructor": {
    "prefix": "rconst",
    "body": [
      "constructor(props) {",
      "\tsuper(props)",
      "",
      "\tthis.state = {",
      "\t\t $0",
      "\t}",
      "}",
      ""
    ],
    "description": "Adds a default constructor for it('', () => {})the class that contains props as arguments"
  },
  "emptyState": {
    "prefix": "est",
    "body": ["state = {", "\t$1", "}", ""],
    "description": "Creates empty state object. To be used in a constructor."
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": ["componentWillMount() {", "\t$0", "}", ""],
    "description": "DEPRECATED!!!. Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": ["componentWillReceiveProps(nextProps) {", "\t$0", "}", ""],
    "description": "DEPRECATED!!!. Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}", ""],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": ["componentWillUpdate(nextProps, nextState) {", "\t$0", "}", ""],
    "description": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}", ""],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {", "\t${1}", "}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates."
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)"
  },
  "componentRender": {
    "prefix": "ren",
    "body": [
      "render() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}"
    ],
    "description": "Basic render."
  },
  "createContext": {
    "prefix": "rcontext",
    "body": ["const ${1:contextName} = React.createContext()", ""],
    "description": "Create React context"
  },
  "createRef": {
    "prefix": "cref",
    "body": ["this.${1:refName}Ref = React.createRef()", ""],
    "description": "Create ref statement used inside constructor"
  },
  "forwardRef": {
    "prefix": "fref",
    "body": ["const ref = React.createRef()", ""],
    "description": "Forward ref statement used inside component"
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState({$0})",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": ["this.setState((state, props) => { return { $0 }})", ""],
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentProps": {
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "state",
    "body": "this.state.$0"
  },
  "bindThis": {
    "prefix": "bnd",
    "body": "this.${1:methodName} = this.${1:methodName}.bind(this)$0",
    "description": "Binds this to a method"
  },
  "reduxAction": {
    "prefix": "rxaction",
    "body": [
      "export const ${1:actionName} = (payload) => ({",
      "\ttype: ${3:type},",
      "\tpayload",
      "})",
      ""
    ]
  },
  "reduxConst": {
    "prefix": "rxconst",
    "body": "export const ${1:constantName} = '${1:constantName}'"
  },
  "reduxReducer": {
    "prefix": "rxreducer",
    "body": [
      "const initialState = {",
      "",
      "}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "\tswitch (type) {",
      "",
      "\tcase ${1:typeName}:",
      "\t\treturn { ...state, ...payload }",
      "",
      "\tdefault:",
      "\t\treturn state",
      "\t}",
      "}",
      ""
    ]
  },
  "reduxSelector": {
    "prefix": "rxselect",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:selectorName} = state => state.${2:selector}",
      ""
    ]
  },
  "reduxUseSelector": {
    "prefix": "rxuseSelector",
    "body": ["const ${1:result} = useSelector(${2:selector}());"]
  },
  "reduxUseDispatch": {
    "prefix": "rxuseDispatch",
    "body": ["const dispatch = useDispatch();"]
  },
  "reduxUseStore": {
    "prefix": "rxuseStore",
    "body": ["const store = useStore();"]
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.shape([]),",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.shape([]).isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.shape({}),",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.shape({}).isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": ["PropTypes.oneOfType([", "\t$0", "]),"],
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": ["PropTypes.oneOfType([", "\t$0", "]).isRequired,"],
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": ["PropTypes.shape({", "\t$0", "}),"],
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": ["PropTypes.shape({", "\t$0", "}).isRequired,"],
    "description": "An object taking on a particular shape required"
  },
  "staticPropTpyes": {
    "prefix": "ptypes",
    "body": ["const propTypes = {", "$0", "};"]
  },
  "defaultPropTpyes": {
    "prefix": "dtypes",
    "body": ["const defaultProps = {", "$0", "};"]
  },
  "propTypeAny": {
    "prefix": "ptany",
    "body": "PropTypes.any,",
    "description": "Any prop type"
  },
  "Comment Big Block": {
    "prefix": "cmmb",
    "body": ["/**", "* $1", " */"]
  },
  "describeBlock": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "\t$0", "})", ""],
    "description": "Testing `describe` block"
  },
  "testBlock": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "\t$0", "})", ""],
    "description": "Testing `test` block"
  },
  "itBlock": {
    "prefix": "tit",
    "body": ["it('should $1', () => {", "\t$0", "})", ""],
    "description": "Testing `it` block"
  },
  "setupReactTest": {
    "prefix": "stest",
    "body": [
      "import React from 'react';",
      "import { fireEvent } from '@testing-library/react';",
      "import { render } from '../../../../../tests/testUtils';",
      "import { ${1:ComponentName} } from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "\tconst defaultProps = {}",
      "",
      "\tit('render', () => {",
      "\t\tconst { container, getByText } = render(<${1:ComponentName} {...defaultProps} />)",
      "\t\tgetByText('');",
      "\t});",
      "});",
      ""
    ]
  },
  "setupReactComponentTestWithRedux": {
    "prefix": "shtest",
    "body": [
      "import { renderHook } from '@testing-library/react-hooks';",
      "import ${1:HookName} from '../${1:HookName}'",
      "",
      "describe('<${1:HookName} />', () => {",
      "\tit('Should ', () => {",
      "\t\tconst { result } = renderHook(() => ${1:HookName}());",
      "\t});",
      "});",
      ""
    ],
    "description": "Create test component"
  },
  "setupJestMock": {
    "prefix": "jmock",
    "body": [
      "jest.mock('${1:moduleName}', () => ({",
      "  __esModule: true,",
      "  default: jest",
      "    .fn(() => '')",
      "    .mockImplementationOnce(() => ('mockedReturn'))",
      "    .mockReturnValueOnce('mockedValue'),",
      "}));"
    ],
    "description": "Create test component"
  },
  "hocComponentWithRedux": {
    "prefix": "hocredux",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export const mapStateToProps = state => ({",
      "",
      "})",
      "",
      "export const mapDispatchToProps = {",
      " ",
      "}",
      "",
      "export const ${1:hocComponentName} = (WrappedComponent) => {",
      "\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "\thocComponent.propTypes = {",
      "\t}",
      "",
      "\treturn hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))",
      ""
    ]
  },
  "hocComponent": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const withSomething = (WrappedComponent) => {",
      "\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "\thocComponent.WrappedComponent = WrappedComponent;",
      "\thocComponent.propTypes = {",
      "\t}",
      "",
      "\treturn hocComponent",
      "}",
      "",
      "export default withSomething;",
      ""
    ]
  },
  "useState": {
    "prefix": ["useState", "us"],
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ]
  },
  "useEffect": {
    "prefix": ["useEffect", "ue"],
    "body": ["useEffect(() => {", "${1}", "}, [${2:input}])"]
  },
  "useEffectClean": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "\treturn () => {",
      "\t\t${1:effect}",
      "\t};",
      "}, [${2:input}])"
    ]
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:context} = useContext(${2:contextValue})"]
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },
  "useCallback": {
    "prefix": ["useCallback", "uc"],
    "body": [
      "useCallback(",
      "\t() => {",
      "\t\t${1:callback}",
      "\t},",
      "\t[${2:input}]",
      ")"
    ]
  },
  "useMemo": {
    "prefix": ["useMemo", "um"],
    "body": ["useMemo(() => ${1:function}, ${2:input})"]
  },
  "useRef": {
    "prefix": ["useRef", "ur"],
    "body": ["const ${1:ref} = useRef(${2:initialValue})"]
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "\t${1:ref},",
      "\t() => {",
      "\t\t${2:handler}",
      "\t},",
      "\t[${3:input}]",
      ")"
    ]
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value})"]
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "\treturn () => {",
      "\t\t${1:effect}",
      "\t},",
      "\t[${2:input}]",
      ")"
    ]
  },
  "regionConstants": {
    "prefix": "rgc",
    "body": ["// #region constants", "${1}", "// #endregion"]
  },
  "regionFunctions": {
    "prefix": "rgf",
    "body": ["// #region functions", "${1}", "// #endregion"]
  },
  "regionStyled": {
    "prefix": "rgsc",
    "body": ["// #region styled-components", "${1}", "// #endregion"]
  },
  "regionComponents": {
    "prefix": "rgrc",
    "body": ["// #region components", "${1}", "// #endregion"]
  },
  "reactHook": {
    "prefix": "rch",
    "body": [
      "// #region constants",
      "",
      "// #endregion",
      "",
      "",
      "// #region functions",
      "",
      "// #endregion",
      "",
      "/**",
      " * ",
      " */",
      "const ${1:${TM_FILENAME_BASE}} = (${1}) => {",
      "\treturn { };",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Creates a React custom hook."
  },
  "Styled Components Import": {
    "prefix": "isc",
    "body": ["import styled from 'styled-components';", "$0"],
    "description": "Import Styled Components"
  },
  "Styled Components Global Style": {
    "prefix": "scg",
    "body": [
      "import { createGlobalStyle } from 'styled-components';",
      "$0",
      "const GlobalStyle = createGlobalStyle`",
      "  body {",
      "    ${1}",
      "  }",
      "`;",
      "$0"
    ],
    "description": "Import Styled Components"
  },
  "Styled Components Props": {
    "prefix": "scp",
    "body": ["${props => props.theme.${1:property}};"],
    "description": "Styled Components Props"
  },
  "Styled Components Hover": {
    "prefix": "sch",
    "body": [":hover {", "  ${1}", "}", "$0"],
    "description": "Styled Components Hover"
  },
  "Styled Components Before": {
    "prefix": "scb",
    "body": ["::before {", "  ${1}", "}", "$0"],
    "description": "Styled Components Before"
  },
  "Styled Components After": {
    "prefix": "sca",
    "body": ["::after {", "  ${1}", "}", "$0"],
    "description": "Styled Components After"
  },
  "Styled Component": {
    "prefix": "scc",
    "body": ["const Styled${1} = styled(${1})`", "${2}", "`;", "$0"],
    "description": "Styled Div"
  },
  "Styled Div": {
    "prefix": "scd",
    "body": ["const Styled${1:name} = styled.div`", "${1}", "`;", "$0"],
    "description": "Styled Div"
  },
  "Styled Span": {
    "prefix": "scs",
    "body": ["const Styled${1:name} = styled.span`", "${1}", "`;", "$0"],
    "description": "Styled Span"
  },
  "Styled Button": {
    "prefix": "scb",
    "body": ["const Styled${1:name} = styled.button`", "${1}", "`;", "$0"],
    "description": "Styled Button"
  },
  "Styled Anchor": {
    "prefix": "sca",
    "body": ["const A = styled.a`", "${1}", "`;", "$0"],
    "description": "Styled Anchor"
  },
  "Styled H1": {
    "prefix": "sch1",
    "body": ["const H1 = styled.h1`", "${1}", "`;", "$0"],
    "description": "Styled H1"
  },
  "Styled H2": {
    "prefix": "sch2",
    "body": ["const H2 = styled.h2`", "${1}", "`;", "$0"],
    "description": "Styled H2"
  },
  "Styled H3": {
    "prefix": "sch3",
    "body": ["const H3 = styled.h3`", "${1}", "`;", "$0"],
    "description": "Styled H3"
  },
  "Styled H4": {
    "prefix": "sch4",
    "body": ["const H4 = styled.h4`", "${1}", "`;", "$0"],
    "description": "Styled H4"
  },
  "Styled H5": {
    "prefix": "sch5",
    "body": ["const H5 = styled.h5`", "${1}", "`;", "$0"],
    "description": "Styled H5"
  },
  "Styled H6": {
    "prefix": "sch6",
    "body": ["const H6 = styled.h6`", "${1}", "`;", "$0"],
    "description": "Styled H6"
  },
  "Styled Paragraph": {
    "prefix": "scp",
    "body": ["const P = styled.p`", "${1}", "`;", "$0"],
    "description": "Styled Paragraph"
  },
  "Styled Ordered List": {
    "prefix": "scol",
    "body": ["const OL = styled.ol`", "${1}", "`;", "$0"],
    "description": "Styled Ordered List"
  },
  "Styled Unordered List": {
    "prefix": "scul",
    "body": ["const UL = styled.ul`", "${1}", "`;", "$0"],
    "description": "Styled Unordered List"
  },
  "Styled List Item": {
    "prefix": "scli",
    "body": ["const LI = styled.li`", "${1}", "`;", "$0"],
    "description": "Styled List Item"
  },
  "Styled Image": {
    "prefix": "scim",
    "body": ["const IMG = styled.img`", "${1}", "`;", "$0"],
    "description": "Styled Image"
  },
  "Styled Input": {
    "prefix": "scin",
    "body": ["const Input = styled.input`", "${1}", "`;", "$0"],
    "description": "Styled Input"
  }
}
